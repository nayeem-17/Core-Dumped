-- 13 January 2022
CREATE TABLE tag(
  id NUMBER PRIMARY KEY,
  title VARCHAR2(64) NOT NULL,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE resources (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  type VARCHAR2(64) NOT NULL,
  url VARCHAR2(128) NOT NULL,
  PRIMARY KEY (id)
);
CREATE TABLE profile (
  id NUMBER generated BY DEFAULT AS identity,
  username VARCHAR2 (64) NOT NULL UNIQUE,
  first_name VARCHAR2 (64) NOT NULL,
  last_name VARCHAR2 (64) NOT NULL,
  password VARCHAR2 (128) NOT NULL,
  birthdate DATE,
  email VARCHAR2 (128),
  profile_picture NUMBER,
  primary key (id),
  CONSTRAINT profile_fk FOREIGN KEY (profile_picture) REFERENCES resources (id)
);
CREATE TABLE follow (
  id NUMBER generated BY DEFAULT AS identity,
  follower NUMBER NOT NULL,
  following NUMBER NOT NULL,
  primary key (id),
  CONSTRAINT follow_fk FOREIGN KEY (follower) REFERENCES profile (id),
  CONSTRAINT follow_fk_1 FOREIGN KEY (following) REFERENCES profile (id)
);
CREATE TABLE planning(
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  title VARCHAR2(128) NOT NULL,
  amount NUMBER DEFAULT 0,
  primary key (id)
);
CREATE TABLE organization (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR2 (128) NOT NULL,
  address VARCHAR2 (256),
  plan int,
  duration int DEFAULT 0,
  isactive CHAR (1) DEFAULT 'n',
  primary key (id),
  constraint organization_fk foreign key (plan) references planning (id)
);
CREATE TABLE badge (
  id NUMBER generated BY DEFAULT AS identity,
  title VARCHAR2 (64),
  primary key (id)
);
CREATE TABLE user_organization_relationship (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY,
  organization_id NUMBER,
  username VARCHAR2 (64),
  badge_id NUMBER,
  primary key (id),
  constraint user_org_fk foreign key (organization_id) references organization (id),
  constraint user_org_fk_1 foreign key (username) references profile (username),
  constraint user_org_fk_2 foreign key (badge_id) references badge (id)
);
CREATE TABLE question (
  id NUMBER generated BY DEFAULT AS identity,
  title VARCHAR2 (1024) NOT NULL,
  content VARCHAR2 (2000) NOT NULL,
  contributed_by NUMBER,
  organization_id NUMBER,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  primary key (id),
  CONSTRAINT question_fk FOREIGN KEY (contributed_by) REFERENCES profile (id),
  CONSTRAINT question_fk_1 FOREIGN KEY (organization_id) REFERENCES organization (id)
);
CREATE TABLE answer (
  id NUMBER generated BY DEFAULT AS identity,
  title VARCHAR2 (1024) NOT NULL,
  answer VARCHAR2 (2000) NOT NULL,
  contributed_by NUMBER,
  question_id NUMBER,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  primary key (id),
  CONSTRAINT answer_fk FOREIGN KEY (contributed_by) REFERENCES profile (id),
  CONSTRAINT answer_fk_1 FOREIGN KEY (question_id) REFERENCES question (id)
);
CREATE TABLE article (
  id NUMBER generated BY DEFAULT AS identity,
  title VARCHAR2 (1024) NOT NULL,
  content VARCHAR2 (2000) NOT NULL,
  contributed_by NUMBER,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  primary key (id),
  CONSTRAINT article_fk FOREIGN KEY (contributed_by) REFERENCES profile (id)
);
CREATE TABLE comments (
  id NUMBER generated BY DEFAULT AS identity,
  text VARCHAR2 (1024) NOT NULL,
  contributed_by NUMBER,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  primary key (id),
  CONSTRAINT comments_fk FOREIGN KEY (contributed_by) REFERENCES profile (id)
);
DROP TABLE ANSWER_COMMENT;
CREATE TABLE answer_comment (
  id NUMBER generated BY DEFAULT AS identity,
  answer_id NUMBER,
  comment_id NUMBER,
  primary key (id),
  CONSTRAINT answer_comment_fk FOREIGN KEY (answer_id) REFERENCES answer (id) ON DELETE CASCADE,
  CONSTRAINT answer_comment_fk_1 FOREIGN KEY (comment_id) REFERENCES comments (id) ON DELETE CASCADE
);
DROP TABLE QUESTION_COMMENT;
CREATE TABLE question_comment (
  id NUMBER generated BY DEFAULT AS identity,
  question_id NUMBER,
  comment_id NUMBER,
  primary key (id),
  CONSTRAINT question_comment_fk FOREIGN KEY (question_id) REFERENCES question (id) ON DELETE CASCADE,
  CONSTRAINT question_comment_fk_1 FOREIGN KEY (comment_id) REFERENCES comments (id) ON DELETE CASCADE
);
DROP TABLE ARTICLE_COMMENT;
CREATE TABLE article_comment (
  id NUMBER generated BY DEFAULT AS identity,
  article_id NUMBER,
  comment_id NUMBER,
  primary key (id),
  CONSTRAINT article_comment_fk FOREIGN KEY (article_id) REFERENCES article (id) ON DELETE CASCADE,
  CONSTRAINT article_comment_fk_1 FOREIGN KEY (comment_id) REFERENCES comments (id) ON DELETE CASCADE
);
DROP TABLE ARTICLE_TAG;
CREATE TABLE article_tag (
  id NUMBER generated BY DEFAULT AS identity,
  article_id NUMBER,
  tag_id NUMBER,
  primary key (id),
  CONSTRAINT article_tag_fk FOREIGN KEY (article_id) REFERENCES article (id) ON DELETE CASCADE,
  CONSTRAINT article_tag_fk_1 FOREIGN KEY (tag_id) REFERENCES tag (id) ON DELETE CASCADE
);
DROP TABLE QUESTION_TAG;
CREATE TABLE question_tag (
  id NUMBER generated BY DEFAULT AS identity,
  question_id NUMBER,
  tag_id NUMBER,
  primary key (id),
  CONSTRAINT question_tag_fk FOREIGN KEY (question_id) REFERENCES question (id) ON DELETE CASCADE,
  CONSTRAINT question_tag_fk_1 FOREIGN KEY (tag_id) REFERENCES tag (id) ON DELETE CASCADE
);
DROP TABLE QUESTION_REACT;
CREATE TABLE question_react (
  id NUMBER generated BY DEFAULT AS identity,
  question_id NUMBER,
  react CHAR (1),
  reacted_by NUMBER,
  primary key (id),
  CONSTRAINT question_react_fk FOREIGN KEY (question_id) REFERENCES question (id) ON DELETE CASCADE,
  CONSTRAINT question_react_fk_1 FOREIGN KEY (reacted_by) REFERENCES profile (id) ON DELETE CASCADE
);
DROP TABLE ANSWER_REACT;
CREATE TABLE answer_react (
  id NUMBER generated BY DEFAULT AS identity,
  answer_id NUMBER,
  react CHAR (1),
  reacted_by NUMBER,
  primary key (id),
  CONSTRAINT answer_react_fk FOREIGN KEY (answer_id) REFERENCES answer (id) ON DELETE CASCADE,
  CONSTRAINT answer_react_fk_1 FOREIGN KEY (reacted_by) REFERENCES profile (id) ON DELETE CASCADE
);
DROP TABLE article_react ;
CREATE TABLE article_react (
  id NUMBER generated BY DEFAULT AS identity,
  article_id NUMBER,
  react CHAR (1),
  reacted_by NUMBER,
  primary key (id),
  CONSTRAINT article_react_fk FOREIGN KEY (article_id) REFERENCES article (id) ON DELETE CASCADE,
  CONSTRAINT article_react_fk_1 FOREIGN KEY (reacted_by) REFERENCES profile (id) ON DELETE CASCADE
);

--30 JANUARY 2022
DROP TABLE FOLLOW ;
CREATE TABLE FOLLOW (
  FOLLOWER NUMBER NOT NULL,
  FOLLOWING NUMBER NOT NULL,
  CONSTRAINT FOLLOW_PK PRIMARY KEY (FOLLOWER,FOLLOWING),
  CONSTRAINT FOLLOWER_FK FOREIGN KEY ( FOLLOWER ) REFERENCES PROFILE(ID) ON DELETE CASCADE,
  CONSTRAINT FOLLOWING_FK FOREIGN KEY ( FOLLOWING ) REFERENCES PROFILE(ID) ON DELETE CASCADE,
  CONSTRAINT FOLLOW_SELF CHECK ( FOLLOWER <> FOLLOWING)
);

--6 FEBRUARY 2022

DROP TABLE ARTICLE_TAG;
DROP TABLE QUESTION_TAG;
CREATE TABLE TAG (
  ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
  TITLE VARCHAR2(64) NOT NULL UNIQUE,
  DESCRIPTION VARCHAR2(500),
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT TAG_PK PRIMARY KEY (ID)
);

CREATE TABLE ARTICLE_TAG (
  ARTICLE_ID NUMBER NOT NULL,
  TAG_ID NUMBER NOT NULL,
  CONSTRAINT ARTICLE_TAG_PK PRIMARY KEY(TAG_ID,ARTICLE_ID),
  CONSTRAINT ARTICLE_TAG_FK FOREIGN KEY (ARTICLE_ID) REFERENCES ARTICLE(ID) ON DELETE CASCADE,
  CONSTRAINT ARTICLE_TAG_FK_1 FOREIGN KEY (TAG_ID) REFERENCES TAG (ID) ON DELETE CASCADE
);

CREATE TABLE question_tag (
  question_id NUMBER,
  tag_id NUMBER,
  CONSTRAINT QUESTION_TAG_PK PRIMARY KEY (TAG_ID,QUESTION_ID),
  CONSTRAINT question_tag_fk FOREIGN KEY (question_id) REFERENCES question (id) ON DELETE CASCADE,
  CONSTRAINT question_tag_fk_1 FOREIGN KEY (tag_id) REFERENCES tag (id) ON DELETE CASCADE
);


CREATE OR REPLACE TRIGGER FORMAT_TAG_TITLE
BEFORE INSERT OR UPDATE
ON TAG
FOR EACH ROW 
DECLARE 
BEGIN 
  :NEW.TITLE := LOWER(TRANSLATE(:NEW.TITLE,' ','-'));
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;  
END ;
/

CREATE OR REPLACE FUNCTION SEARCH_QUESTION(SEARCH_STRING IN VARCHAR2) 
RETURN SYS_REFCURSOR 
IS 
	RESULT SYS_REFCURSOR;
	CONV_STRING VARCHAR2(1000);
BEGIN
	CONV_STRING := LOWER(TRANSLATE(SEARCH_STRING,' ', '|'));
	OPEN RESULT FOR 
	SELECT ID
	FROM QUESTION 
	WHERE REGEXP_LIKE(LOWER(TITLE),CONV_STRING) OR REGEXP_LIKE(LOWER(CONTENT),CONV_STRING);
	RETURN RESULT;
END ;
/

CREATE OR REPLACE FUNCTION SEARCH_ARTICLE(SEARCH_STRING IN VARCHAR2)
RETURN SYS_REFCURSOR
IS
	RESULT SYS_REFCURSOR;
	CONV_STRING VARCHAR2(1000);
BEGIN 
	CONV_STRING := LOWER(TRANSLATE(SEARCH_STRING,' ', '|'));
	OPEN RESULT FOR 
	SELECT ID
	FROM ARTICLE
	WHERE REGEXP_LIKE(LOWER(TITLE),CONV_STRING) OR REGEXP_LIKE(LOWER(CONTENT),CONV_STRING);
	RETURN RESULT;
END ;
/

CREATE OR REPLACE FUNCTION SEARCH_PROFILE(SEARCH_STRING IN VARCHAR2)
RETURN SYS_REFCURSOR
IS 
	RESULT SYS_REFCURSOR;
	CONV_STRING VARCHAR2(1000);
BEGIN 
	CONV_STRING := LOWER(TRANSLATE(SEARCH_STRING,' ','|'));
	OPEN RESULT FOR 
	SELECT ID,USERNAME 
	FROM PROFILE 
	WHERE REGEXP_LIKE(LOWER(USERNAME),CONV_STRING) OR REGEXP_LIKE(LOWER(FIRST_NAME||LAST_NAME),CONV_STRING) ;
	RETURN RESULT; 
END;
/

CREATE OR REPLACE FUNCTION SEARCH_TAG(SEARCH_STRING IN VARCHAR2)
RETURN SYS_REFCURSOR
IS 
	RESULT SYS_REFCURSOR;
	CONV_STRING VARCHAR2(1000);
BEGIN 
	CONV_STRING := LOWER(TRANSLATE(SEARCH_STRING,' ','|'));
	OPEN RESULT FOR 
	SELECT ID, TITLE 
	FROM TAG
	WHERE REGEXP_LIKE(LOWER(TITLE),CONV_STRING) OR REGEXP_LIKE(LOWER(DESCRIPTION),CONV_STRING) ;
	RETURN RESULT; 
END ;
/

CREATE TABLE PROFILE_INTERESTED_IN (
  PROFILE_ID NUMBER NOT NULL,
  TAG_ID NUMBER NOT NULL,
  CONSTRAINT PROFILE_INTERESTED_IN_PK PRIMARY KEY(PROFILE_ID,TAG_ID),
  CONSTRAINT PROFILE_INTERESTED_IN_FK FOREIGN KEY (TAG_ID) REFERENCES TAG(ID),
  CONSTRAINT PROFILE_INTERESTED_IN_FK1 FOREIGN KEY (PROFILE_ID) REFERENCES PROFILE(ID)
);

alter table tag
add synonyms varchar2(256);

CREATE OR REPLACE FUNCTION SEARCH_TAG(SEARCH_STRING IN VARCHAR2)
RETURN SYS_REFCURSOR
IS 
	RESULT SYS_REFCURSOR;
	CONV_STRING VARCHAR2(1000);
BEGIN 
	CONV_STRING := LOWER(TRANSLATE(SEARCH_STRING,' ','|'));
	OPEN RESULT FOR 
	SELECT ID, TITLE 
	FROM TAG
	WHERE REGEXP_LIKE(LOWER(TITLE),CONV_STRING) OR REGEXP_LIKE(LOWER(TRANSLATE(SYNONYMS,',',' ')),CONV_STRING) ;
	RETURN RESULT; 
END ;
/

--7 FEBRUARY 2022
ALTER TABLE ANSWER
DROP COLUMN TITLE;


--13 FEBRUARY 2022
alter table profile
drop constraint profile_fk;

alter table profile
modify profile_picture varchar2(512);

alter table profile
add title varchar2(128);

alter table profile
add description varchar2(512);

alter table profile
add last_active timestamp default current_timestamp;

alter table profile
add created_at timestamp default current_timestamp;

ALTER TABLE profile 
ADD reputation NUMBER DEFAULT 0;

CREATE TABLE NOTIFICATION(
    ID NUMBER generated BY DEFAULT AS identity,
    PROFILE_ID NUMBER NOT NULL,
    LINK VARCHAR2(100) NOT NULL,
    MESSAGE VARCHAR2(512) NOT NULL,
    IS_READ NUMBER(1) DEFAULT 0,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pK_NOTIFICATION PRIMARY KEY (ID),
    CONSTRAINT FK_NOTIFICATION FOREIGN KEY(PROFILE_ID) REFERENCES PROFILE(ID) ON DELETE CASCADE

);
-- DROP TABLE NOTIFICATION;



--18 FEBRUARY 2022
alter table question
drop constraint question_fk

alter table question
add constraint question_fk foreign key (contributed_by) references profile(id) on delete cascade;

alter table question
drop constraint question_fk_1;

alter table question
add constraint question_fk_1 foreign key (organization_id) references organization (id) on delete cascade;

alter table answer
drop constraint answer_fk
drop constraint answer_fk_1;
alter table answer
add constraint answer_fk foreign key (contributed_by) references profile(id) on delete cascade
add constraint answer_fk_1 foreign key (question_id) references question(id) on delete cascade;

alter table article
drop constraint article_fk;
alter table article
add constraint article_fk foreign key (contributed_by) references profile(id) on delete cascade ;

alter table comments
drop constraint comments_fk;
alter table comments 
add constraint comments_fk foreign key (contributed_by) references profile(id) on delete cascade;

alter table article_tag
drop constraint article_tag_fk
drop constraint article_tag_fk1;

alter table article_tag
add constraint article_tag_fk foreign key (article_id) references article(id) on delete cascade 
add constraint article_tag_fk_1 foreign key (tag_id) references tag(id) on delete cascade ;

alter table question_tag
drop constraint question_tag_fk
drop constraint question_tag_fk_1;

alter table question_tag
add constraint question_tag_fk foreign key (question_id) references question(id) on delete cascade 
add constraint question_tag_fk_1 foreign key (tag_id) references tag(id) on delete cascade;



alter table question
add views number default 0;

alter table article
add views number default 0;



CREATE TABLE MESSAGES (
    ID NUMBER generated BY DEFAULT AS identity,
    SENDER_ID NUMBER NOT NULL,
    RECEIVER_ID NUMBER NOT NULL,
    MESSAGE VARCHAR2(512) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT pK_MESSAGES PRIMARY KEY (ID),
    CONSTRAINT FK_MESSAGES FOREIGN KEY(SENDER_ID) REFERENCES PROFILE(ID) ON DELETE CASCADE,
    CONSTRAINT FK_MESSAGES_1 FOREIGN KEY(RECEIVER_ID) REFERENCES PROFILE(ID) ON DELETE CASCADE
);

CREATE OR REPLACE TRIGGER MESSAGES_TRIGGER_ON_UPDATE
BEFORE UPDATE ON MESSAGES
FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;



--- 22 February 2022
alter table article
add temp clob ;

update article 
set temp = content ;

alter table article
drop column content ;

alter table article
rename column temp 
to 
content ;

alter table question
add temp clob ;

update question 
set temp = content ;

alter table question
drop column content ;

alter table question
rename column temp 
to 
content ;

alter table answer
add temp clob ;

update answer 
set temp = answer ;

alter table answer
drop column answer ;

alter table answer
rename column temp 
to 
answer;

