-- on UPDATE TIMESTAMP

-- -- ANSWER
-- CREATE OR REPLACE TRIGGER ON_UPDATE_ANSWER 
-- BEFORE UPDATE
-- OF ANSWER 
-- ON ANSWER
-- FOR EACH ROW
-- DECLARE
-- BEGIN
--     :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
-- END;
-- /
-- -- ARTICLE
-- CREATE OR REPLACE TRIGGER ON_UPDATE_ARTICLE
-- BEFORE UPDATE
-- OF CONTENT
-- ON ARTICLE
-- FOR EACH ROW
-- DECLARE
-- BEGIN
--     :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
-- END;
-- /
-- -- COMMENTS
-- CREATE OR REPLACE TRIGGER ON_UPDATE_COMMENT
-- BEFORE UPDATE
-- ON COMMENTS
-- FOR EACH ROW
-- DECLARE
-- BEGIN
--     :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
-- END;
-- /
-- -- QUESTION
-- CREATE OR REPLACE TRIGGER ON_UPDATE_QUESTION
-- BEFORE UPDATE
-- OF CONTENT
-- ON QUESTION
-- FOR EACH ROW
-- DECLARE
-- BEGIN
--     :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
-- END;
-- /
-- -- TAG
CREATE OR REPLACE TRIGGER ON_UPDATE_TAG
BEFORE UPDATE
ON TAG
FOR EACH ROW
DECLARE
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/
-- NOTIFICATION
CREATE OR REPLACE TRIGGER ON_UPDATE_NOTIFICATION
BEFORE UPDATE
ON NOTIFICATION
FOR EACH ROW
DECLARE
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

-- AFTER REACTING ARTICLE
CREATE OR REPLACE TRIGGER ON_ARTICLE_REACT
BEFORE INSERT OR UPDATE
ON ARTICLE_REACT
FOR EACH ROW
DECLARE
    NREPUTATION NUMBER;
    N_PROFILE_ID NUMBER;
BEGIN
    NREPUTATION:=0;
    :NEW.REACT:= UPPER(:NEW.REACT);
    IF :NEW.REACT = 'Y' THEN
        NREPUTATION := 1;
    ELSIF :NEW.REACT = 'N' THEN
        NREPUTATION := -1;
    END IF;
    
    SELECT 
        CONTRIBUTED_BY INTO N_PROFILE_ID
    FROM 
        ARTICLE 
    WHERE 
        ARTICLE.ID = :NEW.ARTICLE_ID;
    
    IF N_PROFILE_ID <> :NEW.REACTED_BY THEN
    -- updating reputation
        UPDATE 
            PROFILE 
        SET 
            REPUTATION = REPUTATION + NREPUTATION
        WHERE 
            PROFILE.ID = N_PROFILE_ID;
    -- adding notification
        INSERT INTO NOTIFICATION (
            PROFILE_ID,
            LINK,
            MESSAGE
        )
        VALUES (
            N_PROFILE_ID,
            '/article/' || :NEW.ARTICLE_ID,
            (SELECT (FIRST_NAME||' '||LAST_NAME) FROM PROFILE WHERE ID = :NEW.REACTED_BY) ||' reacted your article'
        );
    END IF;
END;
/
-- AFTER REACTING QUESTION
CREATE OR REPLACE TRIGGER ON_QUESTION_REACT
BEFORE INSERT OR UPDATE 
ON QUESTION_REACT
FOR EACH ROW
DECLARE
    NREPUTATION NUMBER;
    N_PROFILE_ID NUMBER;
BEGIN
    NREPUTATION:=0;
    :NEW.REACT:= UPPER(:NEW.REACT);
    IF :NEW.REACT = 'Y' THEN
        NREPUTATION := 1;
    ELSIF :NEW.REACT = 'N' THEN
        NREPUTATION := -1;
    END IF;
    
    SELECT 
        CONTRIBUTED_BY INTO N_PROFILE_ID
    FROM 
        QUESTION 
    WHERE 
        ID = :NEW.QUESTION_ID;
    
    IF N_PROFILE_ID <> :NEW.REACTED_BY THEN
        -- updating reputation
        UPDATE 
            PROFILE 
        SET 
            REPUTATION = REPUTATION + NREPUTATION
        WHERE 
            ID = N_PROFILE_ID;
        -- adding notification
        INSERT INTO NOTIFICATION (
            PROFILE_ID,
            LINK,
            MESSAGE
        )
        VALUES (
            N_PROFILE_ID,
            '/question/' || :NEW.QUESTION_ID,
            (SELECT (FIRST_NAME||' '||LAST_NAME) FROM PROFILE WHERE ID = :NEW.REACTED_BY) ||' reacted your question'
        );
    END IF;
END;
/

-- AFTER REACTING ANSWER
CREATE OR REPLACE TRIGGER ON_ANSWER_REACT
BEFORE INSERT OR UPDATE 
ON ANSWER_REACT
FOR EACH ROW
DECLARE
    NREPUTATION NUMBER;
    QID NUMBER ;
    N_PROFILE_ID NUMBER;
BEGIN
    NREPUTATION:=0;
    :NEW.REACT:= UPPER(:NEW.REACT);
    IF :NEW.REACT = 'Y' THEN
        NREPUTATION := 1;
    ELSIF :NEW.REACT = 'N' THEN
        NREPUTATION := -1;
    END IF;
    
    SELECT 
        CONTRIBUTED_BY,QUESTION_ID INTO N_PROFILE_ID,QID
    FROM 
        ANSWER 
    WHERE 
        ANSWER.ID = :NEW.ANSWER_ID;
    
    IF N_PROFILE_ID <> :NEW.REACTED_BY THEN
        --UPDATING REPUTATION
        UPDATE 
            PROFILE 
        SET 
            REPUTATION = REPUTATION + NREPUTATION
        WHERE 
            PROFILE.ID = N_PROFILE_ID;
        -- adding notification
        INSERT INTO NOTIFICATION (
            PROFILE_ID,
            LINK,
            MESSAGE
        )
        VALUES (
            N_PROFILE_ID,
            '/question/' || QID,
            (SELECT (FIRST_NAME||' '||LAST_NAME) FROM PROFILE WHERE ID = :NEW.REACTED_BY) ||' reacted your answer'
        );     
    END IF;
END;
/

-- AFTER CREATING A QUESTION NOTIFICATION
CREATE OR REPLACE TRIGGER ON_QUESTION_POST
BEFORE INSERT
ON QUESTION
FOR EACH ROW
DECLARE
    N_PROFILE_ID NUMBER;
BEGIN
    N_PROFILE_ID:= :NEW.CONTRIBUTED_BY;
    UPDATE 
        PROFILE 
    SET 
        REPUTATION = REPUTATION + 1
    WHERE 
        PROFILE.ID = N_PROFILE_ID;
    
    -- adding notification TO FOLLOWERS OF THE AUTHOR
    FOR R IN (SELECT FOLLOWER FROM FOLLOW WHERE FOLLOWING = :NEW.CONTRIBUTED_BY )
    LOOP
        INSERT INTO NOTIFICATION (
            PROFILE_ID,
            LINK,
            MESSAGE
        )
        VALUES (
            R.FOLLOWER,
            '/question/' || :NEW.ID,
            (SELECT (FIRST_NAME||' '||LAST_NAME) FROM PROFILE WHERE ID = :NEW.CONTRIBUTED_BY) ||' asked a new question. HelMp him FFS!'
        );
    END LOOP;  
END;
/

--AFTER CREATING A ARTICLE
CREATE OR REPLACE TRIGGER ON_ARTICLE_POST
BEFORE INSERT
ON ARTICLE
FOR EACH ROW
DECLARE
    N_PROFILE_ID NUMBER;
BEGIN
    N_PROFILE_ID:= :NEW.CONTRIBUTED_BY;
    UPDATE 
        PROFILE 
    SET 
        REPUTATION = REPUTATION + 1
    WHERE 
        PROFILE.ID = N_PROFILE_ID;
    
    -- adding notification TO FOLLOWERS OF THE AUTHOR
    FOR R IN (SELECT FOLLOWER FROM FOLLOW WHERE FOLLOWING = :NEW.CONTRIBUTED_BY )
    LOOP
        INSERT INTO NOTIFICATION (
            PROFILE_ID,
            LINK,
            MESSAGE
        )
        VALUES (
            R.FOLLOWER,
            '/article/' || :NEW.ID,
            (SELECT (FIRST_NAME||' '||LAST_NAME) FROM PROFILE WHERE ID = :NEW.CONTRIBUTED_BY) ||' posted an article. Might be great!!'
        );
    END LOOP;  
END;
/

-- AFTER CREATING AN ANSWER NOTIFICATION
CREATE OR REPLACE TRIGGER ON_ANSWER_POST
AFTER INSERT
ON ANSWER
FOR EACH ROW
DECLARE
    NREPUTATION NUMBER;
    N_AUTHOR NUMBER;
BEGIN
    SELECT
        CONTRIBUTED_BY INTO N_AUTHOR
    FROM
        QUESTION
    WHERE
        QUESTION.ID = :NEW.QUESTION_ID;
    
    NREPUTATION:=1;

    UPDATE 
        PROFILE
    SET
        REPUTATION = REPUTATION + NREPUTATION
    WHERE
        PROFILE.ID = :NEW.CONTRIBUTED_BY;
    -- adding notification TO THE AUTHOR
    IF N_AUTHOR<>:NEW.CONTRIBUTED_BY THEN 
        INSERT INTO NOTIFICATION (
            PROFILE_ID,
            LINK,
            MESSAGE
        )
        VALUES (
            N_AUTHOR,
            '/question/' || :NEW.QUESTION_ID,
            (SELECT (FIRST_NAME||' '||LAST_NAME) FROM PROFILE WHERE ID = :NEW.CONTRIBUTED_BY) ||' answered your question'
        );  
    END IF;
END;
/


CREATE OR REPLACE TRIGGER MESSAGES_TRIGGER_ON_UPDATE
BEFORE UPDATE ON MESSAGES
FOR EACH ROW
BEGIN
    :NEW.UPDATED_AT := CURRENT_TIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER FORMAT_TAG_TITLE
BEFORE INSERT OR UPDATE
ON TAG
FOR EACH ROW 
DECLARE 
BEGIN 
  :NEW.TITLE := LOWER(TRANSLATE(:NEW.TITLE,' ','-'));
  :NEW.UPDATED_AT := CURRENT_TIMESTAMP;  
END ;
/
